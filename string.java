import java.util.Scanner;
/*Qus:9: Given a containing digits from 2-9 inclusive,return all possible letter combinations that the number
    could represent.Return the answer in any order.
    input:digits="23"
    output:["ad","ae","af","bd","be","bf","cd","ce","cf"]

 */
public class string {

    static void combination(String digits,String[] kp,String res){
        if(digits.length()==0){
            System.out.println(res+" ");
            return;
        }
        int currNum = digits.charAt(0)-'0';
        String choices = kp[currNum];
        for(int i=0;i<choices.length();i++){
            combination(digits.substring(1),kp,res+choices.charAt(i));
        }
    }

    public static void main(String[] args) {
        String digits = "23";
        String[] kp = {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        combination(digits,kp,"");
    }
}



/*Qus:9: There are N stones Numbered 0,1,2,.....N-1.For each i (0<i<N)the height of stone i is hi.There is a Frog!!
    Who is initially on Stone 0.He will repeat the following action some number of times to reach Stone N-1:
    if the frog is currently on Stone i,jump to Stone i+1 or Stone i+2.
    Here a cost of |hi-hj| is incurred,where j is stone to land on.
    => Find the minimum possible cost incurred before the frog reaches Stone N.

 */
//public class string {
//    static int best(int[] h,int n,int idx){
//        if(idx==n-1)return 0;
//        int op1 = best(h,n,idx+1)+Math.abs(h[idx+1]-h[idx]);
//        if(idx==n-2)return op1;
//        int op2 = best(h,n,idx+2)+Math.abs(h[idx+2]-h[idx]);
//        return Math.min(op2,op1);
//    }
//    public static void main(String[] args) {
//        int[] h = {10,30,40,20};
//        System.out.println(best(h,h.length,0));
//
//    }
//}


//Qus:8: Given a String,Write a method to print all its subsequences!!

//public class string {
//    static void sumofSubset(int[] a,int n,int idx,int sum){
//        // Base case
//        if(idx>=n){
//            System.out.println(sum);
//            return;
//        }
//        sumofSubset(a,n,idx+1,sum+a[idx]);
//        sumofSubset(a,n,idx+1,sum);
//
//    }
//
//    public static void main(String[] args) {
//        int[] a = {2,4,5};
//        sumofSubset(a,a.length,0,0);
//
//
//    }
//}

//Qus:7: Given a String,Write a method to print all its subsequences!!

//public class string {
//    static void printSSQ(String s,String currAns){
//        if(s.length()==0){
//            System.out.println(currAns);
//            return;
//        }
//        char curr = s.charAt(0);
//        String rem = s.substring(1);
//        printSSQ(rem,currAns+curr);
//        printSSQ(rem,currAns);
//    }
//
//    public static void main(String[] args) {
//        printSSQ("abc","");
//
//
//    }
//}


/* Qus:6: Given a String, write A Method to return all its subsequences in an ArrayList. A String is a subsequence of a given String that is generated by deleting some character of a given String without changing its order!!
    input: abc
    output: a,b,c,ab,ac,bc,abc
 */

//public class string {
//    static ArrayList<String>getSsq(String s){
//        ArrayList<String>ans = new ArrayList<>();
//        // Base case
//        if(s.length()==0){
//            ans.add("");
//            return ans;
//        }
//
//        char curr = s.charAt(0);
//        ArrayList<String>smallAns = getSsq(s.substring(1));
//        for(String ss:smallAns){
//            ans.add(ss);
//            ans.add(curr+ss);
//        }
//        return ans;
//    }
//
//    public static void main(String[] args) {
//        ArrayList<String>ans = getSsq("abs");
//        for(String ss:ans){
//            System.out.println(ss);
//        }
//
//
//    }
//}




 //Qus:5: String is Palindrome or Not!!
//public class string {
//    static boolean isPalindrome(String s,int l,int r){
//        // Base case
//        if(l>=r)return true;
//
//        return (s.charAt(l)==s.charAt(r) && isPalindrome(s,l+1,r-1));
//    }
//
//
//
//    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
//        System.out.println("Enter String :");
//        String s = sc.nextLine();
//        System.out.println(isPalindrome(s,0,s.length()-1));
//
//
//    }
//}

// Qus:4: Reverse a String using Recursion!! (Method 02)

//public class string {
//
//    static String reverseString(String s){
//        // Base case
//        if(s.length()==0)return "";
//
//
//        // Recursive work
//        String smallAns = reverseString(s.substring(1));
//
//        // Self work
//        return smallAns + s.charAt(0);
//
//
//    }
//
//
//    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
//        System.out.println("Enter String :");
//        String s = sc.nextLine();
//        System.out.println(reverseString(s));
//
//
//    }
//}

// Qus:3: Reverse a String using Recursion!! (Method 01)

//public class string {
//
//    static String reverseString(String s,int idx){
//        // Base case
//        if(idx == s.length())return "";
//
//        // Recursive work
//        String smallAns = reverseString(s,idx+1);
//
//        // Self work
//        return smallAns + s.charAt(idx);
//
//
//    }
//
//
//    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
//        System.out.println("Enter String :");
//        String s = sc.nextLine();
//        System.out.println(reverseString(s,0));
//
//
//    }
//}

// Qus:2: Remove All Occurences of 'a' from string s = "abcax" (Method 02)
//public class string {
//
//    static String removeA2(String s){
//        // Base case
//        if(s.length()==0)return "";
//        String smallAns = removeA2(s.substring(1));
//        char currChar = s.charAt(0);
//        if(currChar!='a'){
//            return currChar + smallAns;
//        }else {
//            return smallAns;
//
//        }
//    }
//
//
//
//    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
//        System.out.println("Enter String :");
//        String s = sc.nextLine();
//        System.out.println(removeA2(s));
//
//
//    }
//}


// Qus:1: Remove All Occurences of 'a' from string s = "abcax" (Method 01)
//public class string {
//
//    static String removeA(String s,int idx){
//        // Base case
//        if(idx == s.length()){
//            return "";
//        }
//        // Recursive Work
//        String smallAns = removeA(s,idx+1);
//
//        char currChar = s.charAt(idx);
//        if(currChar!='a'){
//            return currChar + smallAns;
//        }
//        return smallAns;
//    }
//
//
//
//    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
//        System.out.println("Enter String :");
//        String s = sc.nextLine();
//        System.out.println(removeA(s,0));
//
//
//    }
//}
